//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace SymbolSource.Server.Management.Client.WebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPlansByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageFileLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceFileLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSymbolFileLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentationLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUploadReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRepositoryPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCompanyPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRepositoryPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetProjectPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetVersionPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCompany2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRepositoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateRepositoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRepositoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRepositoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRepositoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogImageFileFoundOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogImageFileNotFoundOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogSourceFileFoundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableStatisticNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatisticOperationCompleted;
        
        private System.Threading.SendOrPostCallback DigestGenerateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DigestValidateResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetVersionHiddenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionLastListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompilationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageFileListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceFileListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDepedencyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageFileListByReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodeImageFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPasswordMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserVisualStudioLinkOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::SymbolSource.Server.Management.Client.Properties.Settings.Default.ITDT_Hss_Server_Management_Client_WebService_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPlansByTypeCompletedEventHandler GetPlansByTypeCompleted;
        
        /// <remarks/>
        public event RemovePlanCompletedEventHandler RemovePlanCompleted;
        
        /// <remarks/>
        public event CreatePlanCompletedEventHandler CreatePlanCompleted;
        
        /// <remarks/>
        public event GetImageFileLinkCompletedEventHandler GetImageFileLinkCompleted;
        
        /// <remarks/>
        public event GetSourceFileLinkCompletedEventHandler GetSourceFileLinkCompleted;
        
        /// <remarks/>
        public event GetSymbolFileLinkCompletedEventHandler GetSymbolFileLinkCompleted;
        
        /// <remarks/>
        public event GetDocumentationLinkCompletedEventHandler GetDocumentationLinkCompleted;
        
        /// <remarks/>
        public event GetPackageLinkCompletedEventHandler GetPackageLinkCompleted;
        
        /// <remarks/>
        public event GetUploadReportsCompletedEventHandler GetUploadReportsCompleted;
        
        /// <remarks/>
        public event UploadPackageCompletedEventHandler UploadPackageCompleted;
        
        /// <remarks/>
        public event GetUserPermissionsCompletedEventHandler GetUserPermissionsCompleted;
        
        /// <remarks/>
        public event GetCompanyPermissionsCompletedEventHandler GetCompanyPermissionsCompleted;
        
        /// <remarks/>
        public event GetRepositoryPermissionsCompletedEventHandler GetRepositoryPermissionsCompleted;
        
        /// <remarks/>
        public event GetProjectPermissionsCompletedEventHandler GetProjectPermissionsCompleted;
        
        /// <remarks/>
        public event GetVersionPermissionsCompletedEventHandler GetVersionPermissionsCompleted;
        
        /// <remarks/>
        public event SetCompanyPermissionsCompletedEventHandler SetCompanyPermissionsCompleted;
        
        /// <remarks/>
        public event SetRepositoryPermissionsCompletedEventHandler SetRepositoryPermissionsCompleted;
        
        /// <remarks/>
        public event SetProjectPermissionsCompletedEventHandler SetProjectPermissionsCompleted;
        
        /// <remarks/>
        public event SetVersionPermissionsCompletedEventHandler SetVersionPermissionsCompleted;
        
        /// <remarks/>
        public event GetCompaniesCompletedEventHandler GetCompaniesCompleted;
        
        /// <remarks/>
        public event CreateCompanyCompletedEventHandler CreateCompanyCompleted;
        
        /// <remarks/>
        public event CreateCompany2CompletedEventHandler CreateCompany2Completed;
        
        /// <remarks/>
        public event UpdateCompanyCompletedEventHandler UpdateCompanyCompleted;
        
        /// <remarks/>
        public event DeleteCompanyCompletedEventHandler DeleteCompanyCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event GetRepositoriesCompletedEventHandler GetRepositoriesCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateRepositoryCompletedEventHandler CreateOrUpdateRepositoryCompleted;
        
        /// <remarks/>
        public event CreateRepositoryCompletedEventHandler CreateRepositoryCompleted;
        
        /// <remarks/>
        public event UpdateRepositoryCompletedEventHandler UpdateRepositoryCompleted;
        
        /// <remarks/>
        public event DeleteRepositoryCompletedEventHandler DeleteRepositoryCompleted;
        
        /// <remarks/>
        public event GetImageFileCompletedEventHandler GetImageFileCompleted;
        
        /// <remarks/>
        public event LogImageFileFoundCompletedEventHandler LogImageFileFoundCompleted;
        
        /// <remarks/>
        public event LogImageFileNotFoundCompletedEventHandler LogImageFileNotFoundCompleted;
        
        /// <remarks/>
        public event LogSourceFileFoundCompletedEventHandler LogSourceFileFoundCompleted;
        
        /// <remarks/>
        public event GetAvailableStatisticNamesCompletedEventHandler GetAvailableStatisticNamesCompleted;
        
        /// <remarks/>
        public event GetStatisticCompletedEventHandler GetStatisticCompleted;
        
        /// <remarks/>
        public event DigestGenerateRequestCompletedEventHandler DigestGenerateRequestCompleted;
        
        /// <remarks/>
        public event DigestValidateResponseCompletedEventHandler DigestValidateResponseCompleted;
        
        /// <remarks/>
        public event GetProjectsCompletedEventHandler GetProjectsCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateProjectCompletedEventHandler CreateOrUpdateProjectCompleted;
        
        /// <remarks/>
        public event CreateProjectCompletedEventHandler CreateProjectCompleted;
        
        /// <remarks/>
        public event UpdateProjectCompletedEventHandler UpdateProjectCompleted;
        
        /// <remarks/>
        public event DeleteProjectCompletedEventHandler DeleteProjectCompleted;
        
        /// <remarks/>
        public event GetVersionsCompletedEventHandler GetVersionsCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateVersionCompletedEventHandler CreateOrUpdateVersionCompleted;
        
        /// <remarks/>
        public event CreateVersionCompletedEventHandler CreateVersionCompleted;
        
        /// <remarks/>
        public event UpdateVersionCompletedEventHandler UpdateVersionCompleted;
        
        /// <remarks/>
        public event DeleteVersionCompletedEventHandler DeleteVersionCompleted;
        
        /// <remarks/>
        public event SetVersionHiddenCompletedEventHandler SetVersionHiddenCompleted;
        
        /// <remarks/>
        public event GetVersionLastListCompletedEventHandler GetVersionLastListCompleted;
        
        /// <remarks/>
        public event GetPackagesCompletedEventHandler GetPackagesCompleted;
        
        /// <remarks/>
        public event GetCompilationListCompletedEventHandler GetCompilationListCompleted;
        
        /// <remarks/>
        public event GetImageFileListCompletedEventHandler GetImageFileListCompleted;
        
        /// <remarks/>
        public event GetSourceFileListCompletedEventHandler GetSourceFileListCompleted;
        
        /// <remarks/>
        public event GetDepedencyListCompletedEventHandler GetDepedencyListCompleted;
        
        /// <remarks/>
        public event GetImageFileListByReferenceCompletedEventHandler GetImageFileListByReferenceCompleted;
        
        /// <remarks/>
        public event GetNodeImageFilesCompletedEventHandler GetNodeImageFilesCompleted;
        
        /// <remarks/>
        public event UserValidateCompletedEventHandler UserValidateCompleted;
        
        /// <remarks/>
        public event CreateUserByKeyCompletedEventHandler CreateUserByKeyCompleted;
        
        /// <remarks/>
        public event GetUserByKeyCompletedEventHandler GetUserByKeyCompleted;
        
        /// <remarks/>
        public event SendPasswordMailCompletedEventHandler SendPasswordMailCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        public event GetUserKeysCompletedEventHandler GetUserKeysCompleted;
        
        /// <remarks/>
        public event AddUserKeyCompletedEventHandler AddUserKeyCompleted;
        
        /// <remarks/>
        public event RemoveUserKeyCompletedEventHandler RemoveUserKeyCompleted;
        
        /// <remarks/>
        public event GetUserVisualStudioLinkCompletedEventHandler GetUserVisualStudioLinkCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetPlansByType", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Plan[] GetPlansByType(string type) {
            object[] results = this.Invoke("GetPlansByType", new object[] {
                        type});
            return ((Plan[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPlansByTypeAsync(string type) {
            this.GetPlansByTypeAsync(type, null);
        }
        
        /// <remarks/>
        public void GetPlansByTypeAsync(string type, object userState) {
            if ((this.GetPlansByTypeOperationCompleted == null)) {
                this.GetPlansByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlansByTypeOperationCompleted);
            }
            this.InvokeAsync("GetPlansByType", new object[] {
                        type}, this.GetPlansByTypeOperationCompleted, userState);
        }
        
        private void OnGetPlansByTypeOperationCompleted(object arg) {
            if ((this.GetPlansByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlansByTypeCompleted(this, new GetPlansByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/RemovePlan", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemovePlan(string name, string type) {
            this.Invoke("RemovePlan", new object[] {
                        name,
                        type});
        }
        
        /// <remarks/>
        public void RemovePlanAsync(string name, string type) {
            this.RemovePlanAsync(name, type, null);
        }
        
        /// <remarks/>
        public void RemovePlanAsync(string name, string type, object userState) {
            if ((this.RemovePlanOperationCompleted == null)) {
                this.RemovePlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePlanOperationCompleted);
            }
            this.InvokeAsync("RemovePlan", new object[] {
                        name,
                        type}, this.RemovePlanOperationCompleted, userState);
        }
        
        private void OnRemovePlanOperationCompleted(object arg) {
            if ((this.RemovePlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePlanCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreatePlan", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreatePlan(string name, string type, decimal monthPrice, decimal yearPrice, int userLimit, int privateRepoLimit) {
            this.Invoke("CreatePlan", new object[] {
                        name,
                        type,
                        monthPrice,
                        yearPrice,
                        userLimit,
                        privateRepoLimit});
        }
        
        /// <remarks/>
        public void CreatePlanAsync(string name, string type, decimal monthPrice, decimal yearPrice, int userLimit, int privateRepoLimit) {
            this.CreatePlanAsync(name, type, monthPrice, yearPrice, userLimit, privateRepoLimit, null);
        }
        
        /// <remarks/>
        public void CreatePlanAsync(string name, string type, decimal monthPrice, decimal yearPrice, int userLimit, int privateRepoLimit, object userState) {
            if ((this.CreatePlanOperationCompleted == null)) {
                this.CreatePlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePlanOperationCompleted);
            }
            this.InvokeAsync("CreatePlan", new object[] {
                        name,
                        type,
                        monthPrice,
                        yearPrice,
                        userLimit,
                        privateRepoLimit}, this.CreatePlanOperationCompleted, userState);
        }
        
        private void OnCreatePlanOperationCompleted(object arg) {
            if ((this.CreatePlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePlanCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetImageFileLink", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetImageFileLink(Caller caller, ref ImageFile imageFile) {
            object[] results = this.Invoke("GetImageFileLink", new object[] {
                        caller,
                        imageFile});
            imageFile = ((ImageFile)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageFileLinkAsync(Caller caller, ImageFile imageFile) {
            this.GetImageFileLinkAsync(caller, imageFile, null);
        }
        
        /// <remarks/>
        public void GetImageFileLinkAsync(Caller caller, ImageFile imageFile, object userState) {
            if ((this.GetImageFileLinkOperationCompleted == null)) {
                this.GetImageFileLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageFileLinkOperationCompleted);
            }
            this.InvokeAsync("GetImageFileLink", new object[] {
                        caller,
                        imageFile}, this.GetImageFileLinkOperationCompleted, userState);
        }
        
        private void OnGetImageFileLinkOperationCompleted(object arg) {
            if ((this.GetImageFileLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageFileLinkCompleted(this, new GetImageFileLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetSourceFileLink", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSourceFileLink(Caller caller, ref SourceFile sourceFile) {
            object[] results = this.Invoke("GetSourceFileLink", new object[] {
                        caller,
                        sourceFile});
            sourceFile = ((SourceFile)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceFileLinkAsync(Caller caller, SourceFile sourceFile) {
            this.GetSourceFileLinkAsync(caller, sourceFile, null);
        }
        
        /// <remarks/>
        public void GetSourceFileLinkAsync(Caller caller, SourceFile sourceFile, object userState) {
            if ((this.GetSourceFileLinkOperationCompleted == null)) {
                this.GetSourceFileLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceFileLinkOperationCompleted);
            }
            this.InvokeAsync("GetSourceFileLink", new object[] {
                        caller,
                        sourceFile}, this.GetSourceFileLinkOperationCompleted, userState);
        }
        
        private void OnGetSourceFileLinkOperationCompleted(object arg) {
            if ((this.GetSourceFileLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceFileLinkCompleted(this, new GetSourceFileLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetSymbolFileLink", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSymbolFileLink(Caller caller, ref ImageFile imageFile) {
            object[] results = this.Invoke("GetSymbolFileLink", new object[] {
                        caller,
                        imageFile});
            imageFile = ((ImageFile)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSymbolFileLinkAsync(Caller caller, ImageFile imageFile) {
            this.GetSymbolFileLinkAsync(caller, imageFile, null);
        }
        
        /// <remarks/>
        public void GetSymbolFileLinkAsync(Caller caller, ImageFile imageFile, object userState) {
            if ((this.GetSymbolFileLinkOperationCompleted == null)) {
                this.GetSymbolFileLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSymbolFileLinkOperationCompleted);
            }
            this.InvokeAsync("GetSymbolFileLink", new object[] {
                        caller,
                        imageFile}, this.GetSymbolFileLinkOperationCompleted, userState);
        }
        
        private void OnGetSymbolFileLinkOperationCompleted(object arg) {
            if ((this.GetSymbolFileLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSymbolFileLinkCompleted(this, new GetSymbolFileLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetDocumentationLink", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentationLink(Caller caller, ref ImageFile imageFile) {
            object[] results = this.Invoke("GetDocumentationLink", new object[] {
                        caller,
                        imageFile});
            imageFile = ((ImageFile)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentationLinkAsync(Caller caller, ImageFile imageFile) {
            this.GetDocumentationLinkAsync(caller, imageFile, null);
        }
        
        /// <remarks/>
        public void GetDocumentationLinkAsync(Caller caller, ImageFile imageFile, object userState) {
            if ((this.GetDocumentationLinkOperationCompleted == null)) {
                this.GetDocumentationLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentationLinkOperationCompleted);
            }
            this.InvokeAsync("GetDocumentationLink", new object[] {
                        caller,
                        imageFile}, this.GetDocumentationLinkOperationCompleted, userState);
        }
        
        private void OnGetDocumentationLinkOperationCompleted(object arg) {
            if ((this.GetDocumentationLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentationLinkCompleted(this, new GetDocumentationLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetPackageLink", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackageLink(Caller caller, ref Version version, string contentType) {
            object[] results = this.Invoke("GetPackageLink", new object[] {
                        caller,
                        version,
                        contentType});
            version = ((Version)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageLinkAsync(Caller caller, Version version, string contentType) {
            this.GetPackageLinkAsync(caller, version, contentType, null);
        }
        
        /// <remarks/>
        public void GetPackageLinkAsync(Caller caller, Version version, string contentType, object userState) {
            if ((this.GetPackageLinkOperationCompleted == null)) {
                this.GetPackageLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageLinkOperationCompleted);
            }
            this.InvokeAsync("GetPackageLink", new object[] {
                        caller,
                        version,
                        contentType}, this.GetPackageLinkOperationCompleted, userState);
        }
        
        private void OnGetPackageLinkOperationCompleted(object arg) {
            if ((this.GetPackageLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageLinkCompleted(this, new GetPackageLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetUploadReports", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadReport[] GetUploadReports(Caller caller) {
            object[] results = this.Invoke("GetUploadReports", new object[] {
                        caller});
            return ((UploadReport[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUploadReportsAsync(Caller caller) {
            this.GetUploadReportsAsync(caller, null);
        }
        
        /// <remarks/>
        public void GetUploadReportsAsync(Caller caller, object userState) {
            if ((this.GetUploadReportsOperationCompleted == null)) {
                this.GetUploadReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUploadReportsOperationCompleted);
            }
            this.InvokeAsync("GetUploadReports", new object[] {
                        caller}, this.GetUploadReportsOperationCompleted, userState);
        }
        
        private void OnGetUploadReportsOperationCompleted(object arg) {
            if ((this.GetUploadReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUploadReportsCompleted(this, new GetUploadReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UploadPackage", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadReport UploadPackage(Caller caller, PackageProject package, string packageFormat, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] packageData, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] symbolPackageData) {
            object[] results = this.Invoke("UploadPackage", new object[] {
                        caller,
                        package,
                        packageFormat,
                        packageData,
                        symbolPackageData});
            return ((UploadReport)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPackageAsync(Caller caller, PackageProject package, string packageFormat, byte[] packageData, byte[] symbolPackageData) {
            this.UploadPackageAsync(caller, package, packageFormat, packageData, symbolPackageData, null);
        }
        
        /// <remarks/>
        public void UploadPackageAsync(Caller caller, PackageProject package, string packageFormat, byte[] packageData, byte[] symbolPackageData, object userState) {
            if ((this.UploadPackageOperationCompleted == null)) {
                this.UploadPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPackageOperationCompleted);
            }
            this.InvokeAsync("UploadPackage", new object[] {
                        caller,
                        package,
                        packageFormat,
                        packageData,
                        symbolPackageData}, this.UploadPackageOperationCompleted, userState);
        }
        
        private void OnUploadPackageOperationCompleted(object arg) {
            if ((this.UploadPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPackageCompleted(this, new UploadPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetUserPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Permissions GetUserPermissions(Caller caller, User user) {
            object[] results = this.Invoke("GetUserPermissions", new object[] {
                        caller,
                        user});
            return ((Permissions)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPermissionsAsync(Caller caller, User user) {
            this.GetUserPermissionsAsync(caller, user, null);
        }
        
        /// <remarks/>
        public void GetUserPermissionsAsync(Caller caller, User user, object userState) {
            if ((this.GetUserPermissionsOperationCompleted == null)) {
                this.GetUserPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetUserPermissions", new object[] {
                        caller,
                        user}, this.GetUserPermissionsOperationCompleted, userState);
        }
        
        private void OnGetUserPermissionsOperationCompleted(object arg) {
            if ((this.GetUserPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPermissionsCompleted(this, new GetUserPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetCompanyPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CompanyPermission[] GetCompanyPermissions(Caller caller, Company company) {
            object[] results = this.Invoke("GetCompanyPermissions", new object[] {
                        caller,
                        company});
            return ((CompanyPermission[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyPermissionsAsync(Caller caller, Company company) {
            this.GetCompanyPermissionsAsync(caller, company, null);
        }
        
        /// <remarks/>
        public void GetCompanyPermissionsAsync(Caller caller, Company company, object userState) {
            if ((this.GetCompanyPermissionsOperationCompleted == null)) {
                this.GetCompanyPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetCompanyPermissions", new object[] {
                        caller,
                        company}, this.GetCompanyPermissionsOperationCompleted, userState);
        }
        
        private void OnGetCompanyPermissionsOperationCompleted(object arg) {
            if ((this.GetCompanyPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyPermissionsCompleted(this, new GetCompanyPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetRepositoryPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RepositoryPermission[] GetRepositoryPermissions(Caller caller, Repository repository) {
            object[] results = this.Invoke("GetRepositoryPermissions", new object[] {
                        caller,
                        repository});
            return ((RepositoryPermission[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRepositoryPermissionsAsync(Caller caller, Repository repository) {
            this.GetRepositoryPermissionsAsync(caller, repository, null);
        }
        
        /// <remarks/>
        public void GetRepositoryPermissionsAsync(Caller caller, Repository repository, object userState) {
            if ((this.GetRepositoryPermissionsOperationCompleted == null)) {
                this.GetRepositoryPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoryPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetRepositoryPermissions", new object[] {
                        caller,
                        repository}, this.GetRepositoryPermissionsOperationCompleted, userState);
        }
        
        private void OnGetRepositoryPermissionsOperationCompleted(object arg) {
            if ((this.GetRepositoryPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRepositoryPermissionsCompleted(this, new GetRepositoryPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetProjectPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProjectPermission[] GetProjectPermissions(Caller caller, Project project) {
            object[] results = this.Invoke("GetProjectPermissions", new object[] {
                        caller,
                        project});
            return ((ProjectPermission[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectPermissionsAsync(Caller caller, Project project) {
            this.GetProjectPermissionsAsync(caller, project, null);
        }
        
        /// <remarks/>
        public void GetProjectPermissionsAsync(Caller caller, Project project, object userState) {
            if ((this.GetProjectPermissionsOperationCompleted == null)) {
                this.GetProjectPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetProjectPermissions", new object[] {
                        caller,
                        project}, this.GetProjectPermissionsOperationCompleted, userState);
        }
        
        private void OnGetProjectPermissionsOperationCompleted(object arg) {
            if ((this.GetProjectPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectPermissionsCompleted(this, new GetProjectPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetVersionPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VersionPermission[] GetVersionPermissions(Caller caller, Version version) {
            object[] results = this.Invoke("GetVersionPermissions", new object[] {
                        caller,
                        version});
            return ((VersionPermission[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionPermissionsAsync(Caller caller, Version version) {
            this.GetVersionPermissionsAsync(caller, version, null);
        }
        
        /// <remarks/>
        public void GetVersionPermissionsAsync(Caller caller, Version version, object userState) {
            if ((this.GetVersionPermissionsOperationCompleted == null)) {
                this.GetVersionPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetVersionPermissions", new object[] {
                        caller,
                        version}, this.GetVersionPermissionsOperationCompleted, userState);
        }
        
        private void OnGetVersionPermissionsOperationCompleted(object arg) {
            if ((this.GetVersionPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionPermissionsCompleted(this, new GetVersionPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/SetCompanyPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCompanyPermissions(Caller caller, User user, Company company, Permission permission) {
            this.Invoke("SetCompanyPermissions", new object[] {
                        caller,
                        user,
                        company,
                        permission});
        }
        
        /// <remarks/>
        public void SetCompanyPermissionsAsync(Caller caller, User user, Company company, Permission permission) {
            this.SetCompanyPermissionsAsync(caller, user, company, permission, null);
        }
        
        /// <remarks/>
        public void SetCompanyPermissionsAsync(Caller caller, User user, Company company, Permission permission, object userState) {
            if ((this.SetCompanyPermissionsOperationCompleted == null)) {
                this.SetCompanyPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCompanyPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetCompanyPermissions", new object[] {
                        caller,
                        user,
                        company,
                        permission}, this.SetCompanyPermissionsOperationCompleted, userState);
        }
        
        private void OnSetCompanyPermissionsOperationCompleted(object arg) {
            if ((this.SetCompanyPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCompanyPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/SetRepositoryPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetRepositoryPermissions(Caller caller, User user, Repository repository, Permission permission) {
            this.Invoke("SetRepositoryPermissions", new object[] {
                        caller,
                        user,
                        repository,
                        permission});
        }
        
        /// <remarks/>
        public void SetRepositoryPermissionsAsync(Caller caller, User user, Repository repository, Permission permission) {
            this.SetRepositoryPermissionsAsync(caller, user, repository, permission, null);
        }
        
        /// <remarks/>
        public void SetRepositoryPermissionsAsync(Caller caller, User user, Repository repository, Permission permission, object userState) {
            if ((this.SetRepositoryPermissionsOperationCompleted == null)) {
                this.SetRepositoryPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRepositoryPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetRepositoryPermissions", new object[] {
                        caller,
                        user,
                        repository,
                        permission}, this.SetRepositoryPermissionsOperationCompleted, userState);
        }
        
        private void OnSetRepositoryPermissionsOperationCompleted(object arg) {
            if ((this.SetRepositoryPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRepositoryPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/SetProjectPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetProjectPermissions(Caller caller, User user, Project project, Permission permission) {
            this.Invoke("SetProjectPermissions", new object[] {
                        caller,
                        user,
                        project,
                        permission});
        }
        
        /// <remarks/>
        public void SetProjectPermissionsAsync(Caller caller, User user, Project project, Permission permission) {
            this.SetProjectPermissionsAsync(caller, user, project, permission, null);
        }
        
        /// <remarks/>
        public void SetProjectPermissionsAsync(Caller caller, User user, Project project, Permission permission, object userState) {
            if ((this.SetProjectPermissionsOperationCompleted == null)) {
                this.SetProjectPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetProjectPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetProjectPermissions", new object[] {
                        caller,
                        user,
                        project,
                        permission}, this.SetProjectPermissionsOperationCompleted, userState);
        }
        
        private void OnSetProjectPermissionsOperationCompleted(object arg) {
            if ((this.SetProjectPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetProjectPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/SetVersionPermissions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetVersionPermissions(Caller caller, User user, Version version, Permission permission) {
            this.Invoke("SetVersionPermissions", new object[] {
                        caller,
                        user,
                        version,
                        permission});
        }
        
        /// <remarks/>
        public void SetVersionPermissionsAsync(Caller caller, User user, Version version, Permission permission) {
            this.SetVersionPermissionsAsync(caller, user, version, permission, null);
        }
        
        /// <remarks/>
        public void SetVersionPermissionsAsync(Caller caller, User user, Version version, Permission permission, object userState) {
            if ((this.SetVersionPermissionsOperationCompleted == null)) {
                this.SetVersionPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetVersionPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetVersionPermissions", new object[] {
                        caller,
                        user,
                        version,
                        permission}, this.SetVersionPermissionsOperationCompleted, userState);
        }
        
        private void OnSetVersionPermissionsOperationCompleted(object arg) {
            if ((this.SetVersionPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetVersionPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetCompanies", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Company[] GetCompanies(Caller caller) {
            object[] results = this.Invoke("GetCompanies", new object[] {
                        caller});
            return ((Company[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompaniesAsync(Caller caller) {
            this.GetCompaniesAsync(caller, null);
        }
        
        /// <remarks/>
        public void GetCompaniesAsync(Caller caller, object userState) {
            if ((this.GetCompaniesOperationCompleted == null)) {
                this.GetCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesOperationCompleted);
            }
            this.InvokeAsync("GetCompanies", new object[] {
                        caller}, this.GetCompaniesOperationCompleted, userState);
        }
        
        private void OnGetCompaniesOperationCompleted(object arg) {
            if ((this.GetCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompaniesCompleted(this, new GetCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateCompany", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateCompany(Caller caller, Company company) {
            this.Invoke("CreateCompany", new object[] {
                        caller,
                        company});
        }
        
        /// <remarks/>
        public void CreateCompanyAsync(Caller caller, Company company) {
            this.CreateCompanyAsync(caller, company, null);
        }
        
        /// <remarks/>
        public void CreateCompanyAsync(Caller caller, Company company, object userState) {
            if ((this.CreateCompanyOperationCompleted == null)) {
                this.CreateCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCompanyOperationCompleted);
            }
            this.InvokeAsync("CreateCompany", new object[] {
                        caller,
                        company}, this.CreateCompanyOperationCompleted, userState);
        }
        
        private void OnCreateCompanyOperationCompleted(object arg) {
            if ((this.CreateCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompanyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateCompany2", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateCompany2(Caller caller, User user, UserKey key, Plan plan) {
            this.Invoke("CreateCompany2", new object[] {
                        caller,
                        user,
                        key,
                        plan});
        }
        
        /// <remarks/>
        public void CreateCompany2Async(Caller caller, User user, UserKey key, Plan plan) {
            this.CreateCompany2Async(caller, user, key, plan, null);
        }
        
        /// <remarks/>
        public void CreateCompany2Async(Caller caller, User user, UserKey key, Plan plan, object userState) {
            if ((this.CreateCompany2OperationCompleted == null)) {
                this.CreateCompany2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCompany2OperationCompleted);
            }
            this.InvokeAsync("CreateCompany2", new object[] {
                        caller,
                        user,
                        key,
                        plan}, this.CreateCompany2OperationCompleted, userState);
        }
        
        private void OnCreateCompany2OperationCompleted(object arg) {
            if ((this.CreateCompany2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompany2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UpdateCompany", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCompany(Caller caller, Company company) {
            this.Invoke("UpdateCompany", new object[] {
                        caller,
                        company});
        }
        
        /// <remarks/>
        public void UpdateCompanyAsync(Caller caller, Company company) {
            this.UpdateCompanyAsync(caller, company, null);
        }
        
        /// <remarks/>
        public void UpdateCompanyAsync(Caller caller, Company company, object userState) {
            if ((this.UpdateCompanyOperationCompleted == null)) {
                this.UpdateCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCompanyOperationCompleted);
            }
            this.InvokeAsync("UpdateCompany", new object[] {
                        caller,
                        company}, this.UpdateCompanyOperationCompleted, userState);
        }
        
        private void OnUpdateCompanyOperationCompleted(object arg) {
            if ((this.UpdateCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompanyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DeleteCompany", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCompany(Caller caller, Company company) {
            this.Invoke("DeleteCompany", new object[] {
                        caller,
                        company});
        }
        
        /// <remarks/>
        public void DeleteCompanyAsync(Caller caller, Company company) {
            this.DeleteCompanyAsync(caller, company, null);
        }
        
        /// <remarks/>
        public void DeleteCompanyAsync(Caller caller, Company company, object userState) {
            if ((this.DeleteCompanyOperationCompleted == null)) {
                this.DeleteCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCompanyOperationCompleted);
            }
            this.InvokeAsync("DeleteCompany", new object[] {
                        caller,
                        company}, this.DeleteCompanyOperationCompleted, userState);
        }
        
        private void OnDeleteCompanyOperationCompleted(object arg) {
            if ((this.DeleteCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompanyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetUsers", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User[] GetUsers(Caller caller, ref Company company) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        caller,
                        company});
            company = ((Company)(results[1]));
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync(Caller caller, Company company) {
            this.GetUsersAsync(caller, company, null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(Caller caller, Company company, object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        caller,
                        company}, this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateUser", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateUser(Caller caller, User user, UserKey key, Plan plan) {
            this.Invoke("CreateUser", new object[] {
                        caller,
                        user,
                        key,
                        plan});
        }
        
        /// <remarks/>
        public void CreateUserAsync(Caller caller, User user, UserKey key, Plan plan) {
            this.CreateUserAsync(caller, user, key, plan, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(Caller caller, User user, UserKey key, Plan plan, object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        caller,
                        user,
                        key,
                        plan}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UpdateUser", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUser(Caller caller, ref User user) {
            object[] results = this.Invoke("UpdateUser", new object[] {
                        caller,
                        user});
            user = ((User)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserAsync(Caller caller, User user) {
            this.UpdateUserAsync(caller, user, null);
        }
        
        /// <remarks/>
        public void UpdateUserAsync(Caller caller, User user, object userState) {
            if ((this.UpdateUserOperationCompleted == null)) {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        caller,
                        user}, this.UpdateUserOperationCompleted, userState);
        }
        
        private void OnUpdateUserOperationCompleted(object arg) {
            if ((this.UpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DeleteUser", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(Caller caller, User user) {
            this.Invoke("DeleteUser", new object[] {
                        caller,
                        user});
        }
        
        /// <remarks/>
        public void DeleteUserAsync(Caller caller, User user) {
            this.DeleteUserAsync(caller, user, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(Caller caller, User user, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        caller,
                        user}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetRepositories", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Repository[] GetRepositories(Caller caller, ref Company company) {
            object[] results = this.Invoke("GetRepositories", new object[] {
                        caller,
                        company});
            company = ((Company)(results[1]));
            return ((Repository[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRepositoriesAsync(Caller caller, Company company) {
            this.GetRepositoriesAsync(caller, company, null);
        }
        
        /// <remarks/>
        public void GetRepositoriesAsync(Caller caller, Company company, object userState) {
            if ((this.GetRepositoriesOperationCompleted == null)) {
                this.GetRepositoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoriesOperationCompleted);
            }
            this.InvokeAsync("GetRepositories", new object[] {
                        caller,
                        company}, this.GetRepositoriesOperationCompleted, userState);
        }
        
        private void OnGetRepositoriesOperationCompleted(object arg) {
            if ((this.GetRepositoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRepositoriesCompleted(this, new GetRepositoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateOrUpdateRepository", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateOrUpdateRepository(Caller caller, ref Repository repository) {
            object[] results = this.Invoke("CreateOrUpdateRepository", new object[] {
                        caller,
                        repository});
            repository = ((Repository)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateRepositoryAsync(Caller caller, Repository repository) {
            this.CreateOrUpdateRepositoryAsync(caller, repository, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateRepositoryAsync(Caller caller, Repository repository, object userState) {
            if ((this.CreateOrUpdateRepositoryOperationCompleted == null)) {
                this.CreateOrUpdateRepositoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateRepositoryOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateRepository", new object[] {
                        caller,
                        repository}, this.CreateOrUpdateRepositoryOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateRepositoryOperationCompleted(object arg) {
            if ((this.CreateOrUpdateRepositoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateRepositoryCompleted(this, new CreateOrUpdateRepositoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateRepository", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateRepository(Caller caller, ref Repository repository) {
            object[] results = this.Invoke("CreateRepository", new object[] {
                        caller,
                        repository});
            repository = ((Repository)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRepositoryAsync(Caller caller, Repository repository) {
            this.CreateRepositoryAsync(caller, repository, null);
        }
        
        /// <remarks/>
        public void CreateRepositoryAsync(Caller caller, Repository repository, object userState) {
            if ((this.CreateRepositoryOperationCompleted == null)) {
                this.CreateRepositoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRepositoryOperationCompleted);
            }
            this.InvokeAsync("CreateRepository", new object[] {
                        caller,
                        repository}, this.CreateRepositoryOperationCompleted, userState);
        }
        
        private void OnCreateRepositoryOperationCompleted(object arg) {
            if ((this.CreateRepositoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRepositoryCompleted(this, new CreateRepositoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UpdateRepository", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateRepository(Caller caller, ref Repository repository) {
            object[] results = this.Invoke("UpdateRepository", new object[] {
                        caller,
                        repository});
            repository = ((Repository)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRepositoryAsync(Caller caller, Repository repository) {
            this.UpdateRepositoryAsync(caller, repository, null);
        }
        
        /// <remarks/>
        public void UpdateRepositoryAsync(Caller caller, Repository repository, object userState) {
            if ((this.UpdateRepositoryOperationCompleted == null)) {
                this.UpdateRepositoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRepositoryOperationCompleted);
            }
            this.InvokeAsync("UpdateRepository", new object[] {
                        caller,
                        repository}, this.UpdateRepositoryOperationCompleted, userState);
        }
        
        private void OnUpdateRepositoryOperationCompleted(object arg) {
            if ((this.UpdateRepositoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRepositoryCompleted(this, new UpdateRepositoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DeleteRepository", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRepository(Caller caller, Repository repository) {
            this.Invoke("DeleteRepository", new object[] {
                        caller,
                        repository});
        }
        
        /// <remarks/>
        public void DeleteRepositoryAsync(Caller caller, Repository repository) {
            this.DeleteRepositoryAsync(caller, repository, null);
        }
        
        /// <remarks/>
        public void DeleteRepositoryAsync(Caller caller, Repository repository, object userState) {
            if ((this.DeleteRepositoryOperationCompleted == null)) {
                this.DeleteRepositoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRepositoryOperationCompleted);
            }
            this.InvokeAsync("DeleteRepository", new object[] {
                        caller,
                        repository}, this.DeleteRepositoryOperationCompleted, userState);
        }
        
        private void OnDeleteRepositoryOperationCompleted(object arg) {
            if ((this.DeleteRepositoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRepositoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetImageFile", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImageFile GetImageFile(Caller caller, string name, string symbolHash) {
            object[] results = this.Invoke("GetImageFile", new object[] {
                        caller,
                        name,
                        symbolHash});
            return ((ImageFile)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageFileAsync(Caller caller, string name, string symbolHash) {
            this.GetImageFileAsync(caller, name, symbolHash, null);
        }
        
        /// <remarks/>
        public void GetImageFileAsync(Caller caller, string name, string symbolHash, object userState) {
            if ((this.GetImageFileOperationCompleted == null)) {
                this.GetImageFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageFileOperationCompleted);
            }
            this.InvokeAsync("GetImageFile", new object[] {
                        caller,
                        name,
                        symbolHash}, this.GetImageFileOperationCompleted, userState);
        }
        
        private void OnGetImageFileOperationCompleted(object arg) {
            if ((this.GetImageFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageFileCompleted(this, new GetImageFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/LogImageFileFound", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogImageFileFound(Caller caller, ImageFile imageFile) {
            this.Invoke("LogImageFileFound", new object[] {
                        caller,
                        imageFile});
        }
        
        /// <remarks/>
        public void LogImageFileFoundAsync(Caller caller, ImageFile imageFile) {
            this.LogImageFileFoundAsync(caller, imageFile, null);
        }
        
        /// <remarks/>
        public void LogImageFileFoundAsync(Caller caller, ImageFile imageFile, object userState) {
            if ((this.LogImageFileFoundOperationCompleted == null)) {
                this.LogImageFileFoundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogImageFileFoundOperationCompleted);
            }
            this.InvokeAsync("LogImageFileFound", new object[] {
                        caller,
                        imageFile}, this.LogImageFileFoundOperationCompleted, userState);
        }
        
        private void OnLogImageFileFoundOperationCompleted(object arg) {
            if ((this.LogImageFileFoundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogImageFileFoundCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/LogImageFileNotFound", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogImageFileNotFound(Caller caller, string imageFileName, string symbolHash) {
            this.Invoke("LogImageFileNotFound", new object[] {
                        caller,
                        imageFileName,
                        symbolHash});
        }
        
        /// <remarks/>
        public void LogImageFileNotFoundAsync(Caller caller, string imageFileName, string symbolHash) {
            this.LogImageFileNotFoundAsync(caller, imageFileName, symbolHash, null);
        }
        
        /// <remarks/>
        public void LogImageFileNotFoundAsync(Caller caller, string imageFileName, string symbolHash, object userState) {
            if ((this.LogImageFileNotFoundOperationCompleted == null)) {
                this.LogImageFileNotFoundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogImageFileNotFoundOperationCompleted);
            }
            this.InvokeAsync("LogImageFileNotFound", new object[] {
                        caller,
                        imageFileName,
                        symbolHash}, this.LogImageFileNotFoundOperationCompleted, userState);
        }
        
        private void OnLogImageFileNotFoundOperationCompleted(object arg) {
            if ((this.LogImageFileNotFoundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogImageFileNotFoundCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/LogSourceFileFound", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogSourceFileFound(Caller caller, SourceFile sourceFile) {
            this.Invoke("LogSourceFileFound", new object[] {
                        caller,
                        sourceFile});
        }
        
        /// <remarks/>
        public void LogSourceFileFoundAsync(Caller caller, SourceFile sourceFile) {
            this.LogSourceFileFoundAsync(caller, sourceFile, null);
        }
        
        /// <remarks/>
        public void LogSourceFileFoundAsync(Caller caller, SourceFile sourceFile, object userState) {
            if ((this.LogSourceFileFoundOperationCompleted == null)) {
                this.LogSourceFileFoundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogSourceFileFoundOperationCompleted);
            }
            this.InvokeAsync("LogSourceFileFound", new object[] {
                        caller,
                        sourceFile}, this.LogSourceFileFoundOperationCompleted, userState);
        }
        
        private void OnLogSourceFileFoundOperationCompleted(object arg) {
            if ((this.LogSourceFileFoundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogSourceFileFoundCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetAvailableStatisticNames", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAvailableStatisticNames(Caller caller) {
            object[] results = this.Invoke("GetAvailableStatisticNames", new object[] {
                        caller});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableStatisticNamesAsync(Caller caller) {
            this.GetAvailableStatisticNamesAsync(caller, null);
        }
        
        /// <remarks/>
        public void GetAvailableStatisticNamesAsync(Caller caller, object userState) {
            if ((this.GetAvailableStatisticNamesOperationCompleted == null)) {
                this.GetAvailableStatisticNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableStatisticNamesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableStatisticNames", new object[] {
                        caller}, this.GetAvailableStatisticNamesOperationCompleted, userState);
        }
        
        private void OnGetAvailableStatisticNamesOperationCompleted(object arg) {
            if ((this.GetAvailableStatisticNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableStatisticNamesCompleted(this, new GetAvailableStatisticNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetStatistic", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Statistic[] GetStatistic(Caller caller, string[] names, StatisticPeriod period, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> from, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> to) {
            object[] results = this.Invoke("GetStatistic", new object[] {
                        caller,
                        names,
                        period,
                        from,
                        to});
            return ((Statistic[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatisticAsync(Caller caller, string[] names, StatisticPeriod period, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to) {
            this.GetStatisticAsync(caller, names, period, from, to, null);
        }
        
        /// <remarks/>
        public void GetStatisticAsync(Caller caller, string[] names, StatisticPeriod period, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, object userState) {
            if ((this.GetStatisticOperationCompleted == null)) {
                this.GetStatisticOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatisticOperationCompleted);
            }
            this.InvokeAsync("GetStatistic", new object[] {
                        caller,
                        names,
                        period,
                        from,
                        to}, this.GetStatisticOperationCompleted, userState);
        }
        
        private void OnGetStatisticOperationCompleted(object arg) {
            if ((this.GetStatisticCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatisticCompleted(this, new GetStatisticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DigestGenerateRequest", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DigestGenerateRequest(string realm) {
            object[] results = this.Invoke("DigestGenerateRequest", new object[] {
                        realm});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DigestGenerateRequestAsync(string realm) {
            this.DigestGenerateRequestAsync(realm, null);
        }
        
        /// <remarks/>
        public void DigestGenerateRequestAsync(string realm, object userState) {
            if ((this.DigestGenerateRequestOperationCompleted == null)) {
                this.DigestGenerateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDigestGenerateRequestOperationCompleted);
            }
            this.InvokeAsync("DigestGenerateRequest", new object[] {
                        realm}, this.DigestGenerateRequestOperationCompleted, userState);
        }
        
        private void OnDigestGenerateRequestOperationCompleted(object arg) {
            if ((this.DigestGenerateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DigestGenerateRequestCompleted(this, new DigestGenerateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DigestValidateResponse", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Caller DigestValidateResponse(string company, string method, string response) {
            object[] results = this.Invoke("DigestValidateResponse", new object[] {
                        company,
                        method,
                        response});
            return ((Caller)(results[0]));
        }
        
        /// <remarks/>
        public void DigestValidateResponseAsync(string company, string method, string response) {
            this.DigestValidateResponseAsync(company, method, response, null);
        }
        
        /// <remarks/>
        public void DigestValidateResponseAsync(string company, string method, string response, object userState) {
            if ((this.DigestValidateResponseOperationCompleted == null)) {
                this.DigestValidateResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDigestValidateResponseOperationCompleted);
            }
            this.InvokeAsync("DigestValidateResponse", new object[] {
                        company,
                        method,
                        response}, this.DigestValidateResponseOperationCompleted, userState);
        }
        
        private void OnDigestValidateResponseOperationCompleted(object arg) {
            if ((this.DigestValidateResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DigestValidateResponseCompleted(this, new DigestValidateResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetProjects", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Project[] GetProjects(Caller caller, ref Repository repository) {
            object[] results = this.Invoke("GetProjects", new object[] {
                        caller,
                        repository});
            repository = ((Repository)(results[1]));
            return ((Project[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectsAsync(Caller caller, Repository repository) {
            this.GetProjectsAsync(caller, repository, null);
        }
        
        /// <remarks/>
        public void GetProjectsAsync(Caller caller, Repository repository, object userState) {
            if ((this.GetProjectsOperationCompleted == null)) {
                this.GetProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsOperationCompleted);
            }
            this.InvokeAsync("GetProjects", new object[] {
                        caller,
                        repository}, this.GetProjectsOperationCompleted, userState);
        }
        
        private void OnGetProjectsOperationCompleted(object arg) {
            if ((this.GetProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectsCompleted(this, new GetProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateOrUpdateProject", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateOrUpdateProject(Caller caller, ref Project project) {
            object[] results = this.Invoke("CreateOrUpdateProject", new object[] {
                        caller,
                        project});
            project = ((Project)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateProjectAsync(Caller caller, Project project) {
            this.CreateOrUpdateProjectAsync(caller, project, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateProjectAsync(Caller caller, Project project, object userState) {
            if ((this.CreateOrUpdateProjectOperationCompleted == null)) {
                this.CreateOrUpdateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateProjectOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateProject", new object[] {
                        caller,
                        project}, this.CreateOrUpdateProjectOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateProjectOperationCompleted(object arg) {
            if ((this.CreateOrUpdateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateProjectCompleted(this, new CreateOrUpdateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateProject", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateProject(Caller caller, ref Project project) {
            object[] results = this.Invoke("CreateProject", new object[] {
                        caller,
                        project});
            project = ((Project)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProjectAsync(Caller caller, Project project) {
            this.CreateProjectAsync(caller, project, null);
        }
        
        /// <remarks/>
        public void CreateProjectAsync(Caller caller, Project project, object userState) {
            if ((this.CreateProjectOperationCompleted == null)) {
                this.CreateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProjectOperationCompleted);
            }
            this.InvokeAsync("CreateProject", new object[] {
                        caller,
                        project}, this.CreateProjectOperationCompleted, userState);
        }
        
        private void OnCreateProjectOperationCompleted(object arg) {
            if ((this.CreateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProjectCompleted(this, new CreateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UpdateProject", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateProject(Caller caller, ref Project project) {
            object[] results = this.Invoke("UpdateProject", new object[] {
                        caller,
                        project});
            project = ((Project)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProjectAsync(Caller caller, Project project) {
            this.UpdateProjectAsync(caller, project, null);
        }
        
        /// <remarks/>
        public void UpdateProjectAsync(Caller caller, Project project, object userState) {
            if ((this.UpdateProjectOperationCompleted == null)) {
                this.UpdateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectOperationCompleted);
            }
            this.InvokeAsync("UpdateProject", new object[] {
                        caller,
                        project}, this.UpdateProjectOperationCompleted, userState);
        }
        
        private void OnUpdateProjectOperationCompleted(object arg) {
            if ((this.UpdateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProjectCompleted(this, new UpdateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DeleteProject", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteProject(Caller caller, Project project) {
            this.Invoke("DeleteProject", new object[] {
                        caller,
                        project});
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(Caller caller, Project project) {
            this.DeleteProjectAsync(caller, project, null);
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(Caller caller, Project project, object userState) {
            if ((this.DeleteProjectOperationCompleted == null)) {
                this.DeleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProjectOperationCompleted);
            }
            this.InvokeAsync("DeleteProject", new object[] {
                        caller,
                        project}, this.DeleteProjectOperationCompleted, userState);
        }
        
        private void OnDeleteProjectOperationCompleted(object arg) {
            if ((this.DeleteProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetVersions", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Version[] GetVersions(Caller caller, ref Project project) {
            object[] results = this.Invoke("GetVersions", new object[] {
                        caller,
                        project});
            project = ((Project)(results[1]));
            return ((Version[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionsAsync(Caller caller, Project project) {
            this.GetVersionsAsync(caller, project, null);
        }
        
        /// <remarks/>
        public void GetVersionsAsync(Caller caller, Project project, object userState) {
            if ((this.GetVersionsOperationCompleted == null)) {
                this.GetVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionsOperationCompleted);
            }
            this.InvokeAsync("GetVersions", new object[] {
                        caller,
                        project}, this.GetVersionsOperationCompleted, userState);
        }
        
        private void OnGetVersionsOperationCompleted(object arg) {
            if ((this.GetVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionsCompleted(this, new GetVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateOrUpdateVersion", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateOrUpdateVersion(Caller caller, ref Version version) {
            object[] results = this.Invoke("CreateOrUpdateVersion", new object[] {
                        caller,
                        version});
            version = ((Version)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateVersionAsync(Caller caller, Version version) {
            this.CreateOrUpdateVersionAsync(caller, version, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateVersionAsync(Caller caller, Version version, object userState) {
            if ((this.CreateOrUpdateVersionOperationCompleted == null)) {
                this.CreateOrUpdateVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateVersionOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateVersion", new object[] {
                        caller,
                        version}, this.CreateOrUpdateVersionOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateVersionOperationCompleted(object arg) {
            if ((this.CreateOrUpdateVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateVersionCompleted(this, new CreateOrUpdateVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateVersion", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateVersion(Caller caller, ref Version version) {
            object[] results = this.Invoke("CreateVersion", new object[] {
                        caller,
                        version});
            version = ((Version)(results[0]));
        }
        
        /// <remarks/>
        public void CreateVersionAsync(Caller caller, Version version) {
            this.CreateVersionAsync(caller, version, null);
        }
        
        /// <remarks/>
        public void CreateVersionAsync(Caller caller, Version version, object userState) {
            if ((this.CreateVersionOperationCompleted == null)) {
                this.CreateVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateVersionOperationCompleted);
            }
            this.InvokeAsync("CreateVersion", new object[] {
                        caller,
                        version}, this.CreateVersionOperationCompleted, userState);
        }
        
        private void OnCreateVersionOperationCompleted(object arg) {
            if ((this.CreateVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateVersionCompleted(this, new CreateVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UpdateVersion", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateVersion(Caller caller, ref Version version) {
            object[] results = this.Invoke("UpdateVersion", new object[] {
                        caller,
                        version});
            version = ((Version)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVersionAsync(Caller caller, Version version) {
            this.UpdateVersionAsync(caller, version, null);
        }
        
        /// <remarks/>
        public void UpdateVersionAsync(Caller caller, Version version, object userState) {
            if ((this.UpdateVersionOperationCompleted == null)) {
                this.UpdateVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVersionOperationCompleted);
            }
            this.InvokeAsync("UpdateVersion", new object[] {
                        caller,
                        version}, this.UpdateVersionOperationCompleted, userState);
        }
        
        private void OnUpdateVersionOperationCompleted(object arg) {
            if ((this.UpdateVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVersionCompleted(this, new UpdateVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/DeleteVersion", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteVersion(Caller caller, Version version) {
            this.Invoke("DeleteVersion", new object[] {
                        caller,
                        version});
        }
        
        /// <remarks/>
        public void DeleteVersionAsync(Caller caller, Version version) {
            this.DeleteVersionAsync(caller, version, null);
        }
        
        /// <remarks/>
        public void DeleteVersionAsync(Caller caller, Version version, object userState) {
            if ((this.DeleteVersionOperationCompleted == null)) {
                this.DeleteVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVersionOperationCompleted);
            }
            this.InvokeAsync("DeleteVersion", new object[] {
                        caller,
                        version}, this.DeleteVersionOperationCompleted, userState);
        }
        
        private void OnDeleteVersionOperationCompleted(object arg) {
            if ((this.DeleteVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/SetVersionHidden", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Version SetVersionHidden(Caller caller, ref Version version, bool hidden) {
            object[] results = this.Invoke("SetVersionHidden", new object[] {
                        caller,
                        version,
                        hidden});
            version = ((Version)(results[1]));
            return ((Version)(results[0]));
        }
        
        /// <remarks/>
        public void SetVersionHiddenAsync(Caller caller, Version version, bool hidden) {
            this.SetVersionHiddenAsync(caller, version, hidden, null);
        }
        
        /// <remarks/>
        public void SetVersionHiddenAsync(Caller caller, Version version, bool hidden, object userState) {
            if ((this.SetVersionHiddenOperationCompleted == null)) {
                this.SetVersionHiddenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetVersionHiddenOperationCompleted);
            }
            this.InvokeAsync("SetVersionHidden", new object[] {
                        caller,
                        version,
                        hidden}, this.SetVersionHiddenOperationCompleted, userState);
        }
        
        private void OnSetVersionHiddenOperationCompleted(object arg) {
            if ((this.SetVersionHiddenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetVersionHiddenCompleted(this, new SetVersionHiddenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetVersionLastList", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Version[] GetVersionLastList(Caller caller) {
            object[] results = this.Invoke("GetVersionLastList", new object[] {
                        caller});
            return ((Version[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionLastListAsync(Caller caller) {
            this.GetVersionLastListAsync(caller, null);
        }
        
        /// <remarks/>
        public void GetVersionLastListAsync(Caller caller, object userState) {
            if ((this.GetVersionLastListOperationCompleted == null)) {
                this.GetVersionLastListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionLastListOperationCompleted);
            }
            this.InvokeAsync("GetVersionLastList", new object[] {
                        caller}, this.GetVersionLastListOperationCompleted, userState);
        }
        
        private void OnGetVersionLastListOperationCompleted(object arg) {
            if ((this.GetVersionLastListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionLastListCompleted(this, new GetVersionLastListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetPackages", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Version[] GetPackages(Caller caller, ref Repository repository, ref PackageFilter filter, string packageFormat) {
            object[] results = this.Invoke("GetPackages", new object[] {
                        caller,
                        repository,
                        filter,
                        packageFormat});
            repository = ((Repository)(results[1]));
            filter = ((PackageFilter)(results[2]));
            return ((Version[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesAsync(Caller caller, Repository repository, PackageFilter filter, string packageFormat) {
            this.GetPackagesAsync(caller, repository, filter, packageFormat, null);
        }
        
        /// <remarks/>
        public void GetPackagesAsync(Caller caller, Repository repository, PackageFilter filter, string packageFormat, object userState) {
            if ((this.GetPackagesOperationCompleted == null)) {
                this.GetPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesOperationCompleted);
            }
            this.InvokeAsync("GetPackages", new object[] {
                        caller,
                        repository,
                        filter,
                        packageFormat}, this.GetPackagesOperationCompleted, userState);
        }
        
        private void OnGetPackagesOperationCompleted(object arg) {
            if ((this.GetPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesCompleted(this, new GetPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetCompilationList", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Compilation[] GetCompilationList(Caller caller, ref Version version) {
            object[] results = this.Invoke("GetCompilationList", new object[] {
                        caller,
                        version});
            version = ((Version)(results[1]));
            return ((Compilation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompilationListAsync(Caller caller, Version version) {
            this.GetCompilationListAsync(caller, version, null);
        }
        
        /// <remarks/>
        public void GetCompilationListAsync(Caller caller, Version version, object userState) {
            if ((this.GetCompilationListOperationCompleted == null)) {
                this.GetCompilationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompilationListOperationCompleted);
            }
            this.InvokeAsync("GetCompilationList", new object[] {
                        caller,
                        version}, this.GetCompilationListOperationCompleted, userState);
        }
        
        private void OnGetCompilationListOperationCompleted(object arg) {
            if ((this.GetCompilationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompilationListCompleted(this, new GetCompilationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetImageFileList", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImageFile[] GetImageFileList(Caller caller, ref Compilation compilation) {
            object[] results = this.Invoke("GetImageFileList", new object[] {
                        caller,
                        compilation});
            compilation = ((Compilation)(results[1]));
            return ((ImageFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageFileListAsync(Caller caller, Compilation compilation) {
            this.GetImageFileListAsync(caller, compilation, null);
        }
        
        /// <remarks/>
        public void GetImageFileListAsync(Caller caller, Compilation compilation, object userState) {
            if ((this.GetImageFileListOperationCompleted == null)) {
                this.GetImageFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageFileListOperationCompleted);
            }
            this.InvokeAsync("GetImageFileList", new object[] {
                        caller,
                        compilation}, this.GetImageFileListOperationCompleted, userState);
        }
        
        private void OnGetImageFileListOperationCompleted(object arg) {
            if ((this.GetImageFileListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageFileListCompleted(this, new GetImageFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetSourceFileList", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SourceFile[] GetSourceFileList(Caller caller, ref ImageFile imageFile) {
            object[] results = this.Invoke("GetSourceFileList", new object[] {
                        caller,
                        imageFile});
            imageFile = ((ImageFile)(results[1]));
            return ((SourceFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceFileListAsync(Caller caller, ImageFile imageFile) {
            this.GetSourceFileListAsync(caller, imageFile, null);
        }
        
        /// <remarks/>
        public void GetSourceFileListAsync(Caller caller, ImageFile imageFile, object userState) {
            if ((this.GetSourceFileListOperationCompleted == null)) {
                this.GetSourceFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceFileListOperationCompleted);
            }
            this.InvokeAsync("GetSourceFileList", new object[] {
                        caller,
                        imageFile}, this.GetSourceFileListOperationCompleted, userState);
        }
        
        private void OnGetSourceFileListOperationCompleted(object arg) {
            if ((this.GetSourceFileListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceFileListCompleted(this, new GetSourceFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetDepedencyList", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Depedency[] GetDepedencyList(Caller caller, ref ImageFile imageFile) {
            object[] results = this.Invoke("GetDepedencyList", new object[] {
                        caller,
                        imageFile});
            imageFile = ((ImageFile)(results[1]));
            return ((Depedency[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDepedencyListAsync(Caller caller, ImageFile imageFile) {
            this.GetDepedencyListAsync(caller, imageFile, null);
        }
        
        /// <remarks/>
        public void GetDepedencyListAsync(Caller caller, ImageFile imageFile, object userState) {
            if ((this.GetDepedencyListOperationCompleted == null)) {
                this.GetDepedencyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDepedencyListOperationCompleted);
            }
            this.InvokeAsync("GetDepedencyList", new object[] {
                        caller,
                        imageFile}, this.GetDepedencyListOperationCompleted, userState);
        }
        
        private void OnGetDepedencyListOperationCompleted(object arg) {
            if ((this.GetDepedencyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDepedencyListCompleted(this, new GetDepedencyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetImageFileListByReference", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImageFile[] GetImageFileListByReference(Caller caller, ref Reference reference) {
            object[] results = this.Invoke("GetImageFileListByReference", new object[] {
                        caller,
                        reference});
            reference = ((Reference)(results[1]));
            return ((ImageFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageFileListByReferenceAsync(Caller caller, Reference reference) {
            this.GetImageFileListByReferenceAsync(caller, reference, null);
        }
        
        /// <remarks/>
        public void GetImageFileListByReferenceAsync(Caller caller, Reference reference, object userState) {
            if ((this.GetImageFileListByReferenceOperationCompleted == null)) {
                this.GetImageFileListByReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageFileListByReferenceOperationCompleted);
            }
            this.InvokeAsync("GetImageFileListByReference", new object[] {
                        caller,
                        reference}, this.GetImageFileListByReferenceOperationCompleted, userState);
        }
        
        private void OnGetImageFileListByReferenceOperationCompleted(object arg) {
            if ((this.GetImageFileListByReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageFileListByReferenceCompleted(this, new GetImageFileListByReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetNodeImageFiles", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NodeImageFile[] GetNodeImageFiles(Caller caller, ref NodeImageFile nodeImageFile) {
            object[] results = this.Invoke("GetNodeImageFiles", new object[] {
                        caller,
                        nodeImageFile});
            nodeImageFile = ((NodeImageFile)(results[1]));
            return ((NodeImageFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNodeImageFilesAsync(Caller caller, NodeImageFile nodeImageFile) {
            this.GetNodeImageFilesAsync(caller, nodeImageFile, null);
        }
        
        /// <remarks/>
        public void GetNodeImageFilesAsync(Caller caller, NodeImageFile nodeImageFile, object userState) {
            if ((this.GetNodeImageFilesOperationCompleted == null)) {
                this.GetNodeImageFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodeImageFilesOperationCompleted);
            }
            this.InvokeAsync("GetNodeImageFiles", new object[] {
                        caller,
                        nodeImageFile}, this.GetNodeImageFilesOperationCompleted, userState);
        }
        
        private void OnGetNodeImageFilesOperationCompleted(object arg) {
            if ((this.GetNodeImageFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodeImageFilesCompleted(this, new GetNodeImageFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/UserValidate", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User UserValidate(Caller caller) {
            object[] results = this.Invoke("UserValidate", new object[] {
                        caller});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void UserValidateAsync(Caller caller) {
            this.UserValidateAsync(caller, null);
        }
        
        /// <remarks/>
        public void UserValidateAsync(Caller caller, object userState) {
            if ((this.UserValidateOperationCompleted == null)) {
                this.UserValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserValidateOperationCompleted);
            }
            this.InvokeAsync("UserValidate", new object[] {
                        caller}, this.UserValidateOperationCompleted, userState);
        }
        
        private void OnUserValidateOperationCompleted(object arg) {
            if ((this.UserValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserValidateCompleted(this, new UserValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/CreateUserByKey", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Caller CreateUserByKey(string company, string type, string value) {
            object[] results = this.Invoke("CreateUserByKey", new object[] {
                        company,
                        type,
                        value});
            return ((Caller)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserByKeyAsync(string company, string type, string value) {
            this.CreateUserByKeyAsync(company, type, value, null);
        }
        
        /// <remarks/>
        public void CreateUserByKeyAsync(string company, string type, string value, object userState) {
            if ((this.CreateUserByKeyOperationCompleted == null)) {
                this.CreateUserByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserByKeyOperationCompleted);
            }
            this.InvokeAsync("CreateUserByKey", new object[] {
                        company,
                        type,
                        value}, this.CreateUserByKeyOperationCompleted, userState);
        }
        
        private void OnCreateUserByKeyOperationCompleted(object arg) {
            if ((this.CreateUserByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserByKeyCompleted(this, new CreateUserByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetUserByKey", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Caller GetUserByKey(string company, string type, string value) {
            object[] results = this.Invoke("GetUserByKey", new object[] {
                        company,
                        type,
                        value});
            return ((Caller)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserByKeyAsync(string company, string type, string value) {
            this.GetUserByKeyAsync(company, type, value, null);
        }
        
        /// <remarks/>
        public void GetUserByKeyAsync(string company, string type, string value, object userState) {
            if ((this.GetUserByKeyOperationCompleted == null)) {
                this.GetUserByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserByKeyOperationCompleted);
            }
            this.InvokeAsync("GetUserByKey", new object[] {
                        company,
                        type,
                        value}, this.GetUserByKeyOperationCompleted, userState);
        }
        
        private void OnGetUserByKeyOperationCompleted(object arg) {
            if ((this.GetUserByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserByKeyCompleted(this, new GetUserByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/SendPasswordMail", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendPasswordMail(Caller caller, string url) {
            this.Invoke("SendPasswordMail", new object[] {
                        caller,
                        url});
        }
        
        /// <remarks/>
        public void SendPasswordMailAsync(Caller caller, string url) {
            this.SendPasswordMailAsync(caller, url, null);
        }
        
        /// <remarks/>
        public void SendPasswordMailAsync(Caller caller, string url, object userState) {
            if ((this.SendPasswordMailOperationCompleted == null)) {
                this.SendPasswordMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPasswordMailOperationCompleted);
            }
            this.InvokeAsync("SendPasswordMail", new object[] {
                        caller,
                        url}, this.SendPasswordMailOperationCompleted, userState);
        }
        
        private void OnSendPasswordMailOperationCompleted(object arg) {
            if ((this.SendPasswordMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPasswordMailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/ResetPassword", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetPassword(Caller caller, UserKey userKey) {
            this.Invoke("ResetPassword", new object[] {
                        caller,
                        userKey});
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(Caller caller, UserKey userKey) {
            this.ResetPasswordAsync(caller, userKey, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(Caller caller, UserKey userKey, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        caller,
                        userKey}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetUserKeys", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserKey[] GetUserKeys(Caller caller, User user) {
            object[] results = this.Invoke("GetUserKeys", new object[] {
                        caller,
                        user});
            return ((UserKey[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserKeysAsync(Caller caller, User user) {
            this.GetUserKeysAsync(caller, user, null);
        }
        
        /// <remarks/>
        public void GetUserKeysAsync(Caller caller, User user, object userState) {
            if ((this.GetUserKeysOperationCompleted == null)) {
                this.GetUserKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserKeysOperationCompleted);
            }
            this.InvokeAsync("GetUserKeys", new object[] {
                        caller,
                        user}, this.GetUserKeysOperationCompleted, userState);
        }
        
        private void OnGetUserKeysOperationCompleted(object arg) {
            if ((this.GetUserKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserKeysCompleted(this, new GetUserKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/AddUserKey", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserKey(Caller caller, User user, UserKey userKey) {
            this.Invoke("AddUserKey", new object[] {
                        caller,
                        user,
                        userKey});
        }
        
        /// <remarks/>
        public void AddUserKeyAsync(Caller caller, User user, UserKey userKey) {
            this.AddUserKeyAsync(caller, user, userKey, null);
        }
        
        /// <remarks/>
        public void AddUserKeyAsync(Caller caller, User user, UserKey userKey, object userState) {
            if ((this.AddUserKeyOperationCompleted == null)) {
                this.AddUserKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserKeyOperationCompleted);
            }
            this.InvokeAsync("AddUserKey", new object[] {
                        caller,
                        user,
                        userKey}, this.AddUserKeyOperationCompleted, userState);
        }
        
        private void OnAddUserKeyOperationCompleted(object arg) {
            if ((this.AddUserKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/RemoveUserKey", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserKey(Caller caller, User user, UserKey userKey) {
            this.Invoke("RemoveUserKey", new object[] {
                        caller,
                        user,
                        userKey});
        }
        
        /// <remarks/>
        public void RemoveUserKeyAsync(Caller caller, User user, UserKey userKey) {
            this.RemoveUserKeyAsync(caller, user, userKey, null);
        }
        
        /// <remarks/>
        public void RemoveUserKeyAsync(Caller caller, User user, UserKey userKey, object userState) {
            if ((this.RemoveUserKeyOperationCompleted == null)) {
                this.RemoveUserKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserKeyOperationCompleted);
            }
            this.InvokeAsync("RemoveUserKey", new object[] {
                        caller,
                        user,
                        userKey}, this.RemoveUserKeyOperationCompleted, userState);
        }
        
        private void OnRemoveUserKeyOperationCompleted(object arg) {
            if ((this.RemoveUserKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.symbolsource.org/schemas/webServices/GetUserVisualStudioLink", RequestNamespace="http://api.symbolsource.org/schemas/webServices", ResponseNamespace="http://api.symbolsource.org/schemas/webServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserVisualStudioLink(Caller caller, User user) {
            object[] results = this.Invoke("GetUserVisualStudioLink", new object[] {
                        caller,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserVisualStudioLinkAsync(Caller caller, User user) {
            this.GetUserVisualStudioLinkAsync(caller, user, null);
        }
        
        /// <remarks/>
        public void GetUserVisualStudioLinkAsync(Caller caller, User user, object userState) {
            if ((this.GetUserVisualStudioLinkOperationCompleted == null)) {
                this.GetUserVisualStudioLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserVisualStudioLinkOperationCompleted);
            }
            this.InvokeAsync("GetUserVisualStudioLink", new object[] {
                        caller,
                        user}, this.GetUserVisualStudioLinkOperationCompleted, userState);
        }
        
        private void OnGetUserVisualStudioLinkOperationCompleted(object arg) {
            if ((this.GetUserVisualStudioLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserVisualStudioLinkCompleted(this, new GetUserVisualStudioLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Plan {
        
        private string nameField;
        
        private string typeField;
        
        private decimal monthPriceField;
        
        private decimal yearPriceField;
        
        private int userLimitField;
        
        private int privateRepoLimitField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public decimal MonthPrice {
            get {
                return this.monthPriceField;
            }
            set {
                this.monthPriceField = value;
            }
        }
        
        /// <remarks/>
        public decimal YearPrice {
            get {
                return this.yearPriceField;
            }
            set {
                this.yearPriceField = value;
            }
        }
        
        /// <remarks/>
        public int UserLimit {
            get {
                return this.userLimitField;
            }
            set {
                this.userLimitField = value;
            }
        }
        
        /// <remarks/>
        public int PrivateRepoLimit {
            get {
                return this.privateRepoLimitField;
            }
            set {
                this.privateRepoLimitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Location {
        
        private int lineField;
        
        private int columnField;
        
        /// <remarks/>
        public int Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public int Column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class CodeBlockAddress {
        
        private SourceFile sourceFileField;
        
        private Location startPositionField;
        
        private Location endPositionField;
        
        /// <remarks/>
        public SourceFile SourceFile {
            get {
                return this.sourceFileField;
            }
            set {
                this.sourceFileField = value;
            }
        }
        
        /// <remarks/>
        public Location StartPosition {
            get {
                return this.startPositionField;
            }
            set {
                this.startPositionField = value;
            }
        }
        
        /// <remarks/>
        public Location EndPosition {
            get {
                return this.endPositionField;
            }
            set {
                this.endPositionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class SourceFile {
        
        private string idField;
        
        private string pathField;
        
        private string hashField;
        
        private string originalPathField;
        
        private string imageNameField;
        
        private string modeField;
        
        private string platformField;
        
        private string versionField;
        
        private string projectField;
        
        private string repositoryField;
        
        private string companyField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string Hash {
            get {
                return this.hashField;
            }
            set {
                this.hashField = value;
            }
        }
        
        /// <remarks/>
        public string OriginalPath {
            get {
                return this.originalPathField;
            }
            set {
                this.originalPathField = value;
            }
        }
        
        /// <remarks/>
        public string ImageName {
            get {
                return this.imageNameField;
            }
            set {
                this.imageNameField = value;
            }
        }
        
        /// <remarks/>
        public string Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public string Platform {
            get {
                return this.platformField;
            }
            set {
                this.platformField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class NodeImageFile {
        
        private string nameField;
        
        private string fullnameField;
        
        private string typeField;
        
        private string modifierField;
        
        private CodeBlockAddress[] codeBlockAddressesField;
        
        private string imageNameField;
        
        private string modeField;
        
        private string platformField;
        
        private string versionField;
        
        private string projectField;
        
        private string repositoryField;
        
        private string companyField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Fullname {
            get {
                return this.fullnameField;
            }
            set {
                this.fullnameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Modifier {
            get {
                return this.modifierField;
            }
            set {
                this.modifierField = value;
            }
        }
        
        /// <remarks/>
        public CodeBlockAddress[] CodeBlockAddresses {
            get {
                return this.codeBlockAddressesField;
            }
            set {
                this.codeBlockAddressesField = value;
            }
        }
        
        /// <remarks/>
        public string ImageName {
            get {
                return this.imageNameField;
            }
            set {
                this.imageNameField = value;
            }
        }
        
        /// <remarks/>
        public string Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public string Platform {
            get {
                return this.platformField;
            }
            set {
                this.platformField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Compilation {
        
        private string modeField;
        
        private string profileField;
        
        private string platformField;
        
        private string versionField;
        
        private string projectField;
        
        private string repositoryField;
        
        private string companyField;
        
        private MetadataEntry[] metadataField;
        
        /// <remarks/>
        public string Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public string Profile {
            get {
                return this.profileField;
            }
            set {
                this.profileField = value;
            }
        }
        
        /// <remarks/>
        public string Platform {
            get {
                return this.platformField;
            }
            set {
                this.platformField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public MetadataEntry[] Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class MetadataEntry {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }

        public override string ToString()
        {
            return String.Format("{0} = {1}", Key, Value);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class PackageFilter {
        
        private string whereField;
        
        private string orderByField;
        
        private int takeField;
        
        private int skipField;
        
        private bool countField;
        
        private bool performedField;
        
        /// <remarks/>
        public string Where {
            get {
                return this.whereField;
            }
            set {
                this.whereField = value;
            }
        }
        
        /// <remarks/>
        public string OrderBy {
            get {
                return this.orderByField;
            }
            set {
                this.orderByField = value;
            }
        }
        
        /// <remarks/>
        public int Take {
            get {
                return this.takeField;
            }
            set {
                this.takeField = value;
            }
        }
        
        /// <remarks/>
        public int Skip {
            get {
                return this.skipField;
            }
            set {
                this.skipField = value;
            }
        }
        
        /// <remarks/>
        public bool Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public bool Performed {
            get {
                return this.performedField;
            }
            set {
                this.performedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class StatisticItem {
        
        private System.DateTime dateField;
        
        private long countField;
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Statistic {
        
        private string nameField;
        
        private StatisticItem[] itemsField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public StatisticItem[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class UserKey {
        
        private int idField;
        
        private string typeField;
        
        private string valueField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Project {
        
        private string nameField;
        
        private string repositoryField;
        
        private string companyField;
        
        private MetadataEntry[] metadataField;
        
        private bool canCreateVersionField;
        
        private bool canEditField;
        
        private bool canDeleteField;
        
        private bool canGrantPermissionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public MetadataEntry[] Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCreateVersion {
            get {
                return this.canCreateVersionField;
            }
            set {
                this.canCreateVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool CanGrantPermission {
            get {
                return this.canGrantPermissionField;
            }
            set {
                this.canGrantPermissionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Repository {
        
        private string nameField;
        
        private string companyField;
        
        private MetadataEntry[] metadataField;
        
        private bool canCreateProjectField;
        
        private bool canEditField;
        
        private bool canDeleteField;
        
        private bool canGrantPermissionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public MetadataEntry[] Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCreateProject {
            get {
                return this.canCreateProjectField;
            }
            set {
                this.canCreateProjectField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool CanGrantPermission {
            get {
                return this.canGrantPermissionField;
            }
            set {
                this.canGrantPermissionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Company {
        
        private string nameField;
        
        private MetadataEntry[] metadataField;
        
        private bool canCreateRepositoryField;
        
        private bool canGrantPermissionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public MetadataEntry[] Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCreateRepository {
            get {
                return this.canCreateRepositoryField;
            }
            set {
                this.canCreateRepositoryField = value;
            }
        }
        
        /// <remarks/>
        public bool CanGrantPermission {
            get {
                return this.canGrantPermissionField;
            }
            set {
                this.canGrantPermissionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectPermission))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepositoryPermission))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompanyPermission))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VersionPermission))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Permission {
        
        private User userField;
        
        private bool readField;
        
        private bool writeField;
        
        private bool grantField;
        
        /// <remarks/>
        public User User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public bool Read {
            get {
                return this.readField;
            }
            set {
                this.readField = value;
            }
        }
        
        /// <remarks/>
        public bool Write {
            get {
                return this.writeField;
            }
            set {
                this.writeField = value;
            }
        }
        
        /// <remarks/>
        public bool Grant {
            get {
                return this.grantField;
            }
            set {
                this.grantField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class User {
        
        private string companyField;
        
        private string nameField;
        
        private string emailField;
        
        private bool canManageCompaniesField;
        
        private bool canManageUsersField;
        
        private bool canViewStatisticsField;
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public bool CanManageCompanies {
            get {
                return this.canManageCompaniesField;
            }
            set {
                this.canManageCompaniesField = value;
            }
        }
        
        /// <remarks/>
        public bool CanManageUsers {
            get {
                return this.canManageUsersField;
            }
            set {
                this.canManageUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool CanViewStatistics {
            get {
                return this.canViewStatisticsField;
            }
            set {
                this.canViewStatisticsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class ProjectPermission : Permission {
        
        private Project projectField;
        
        /// <remarks/>
        public Project Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class RepositoryPermission : Permission {
        
        private Repository repositoryField;
        
        /// <remarks/>
        public Repository Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class CompanyPermission : Permission {
        
        private Company companyField;
        
        /// <remarks/>
        public Company Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class VersionPermission : Permission {
        
        private Version versionField;
        
        /// <remarks/>
        public Version Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Version {
        
        private string nameField;
        
        private string projectField;
        
        private string repositoryField;
        
        private string companyField;
        
        private string packageFormatField;
        
        private string packageHashField;
        
        private bool hiddenField;
        
        private MetadataEntry[] metadataField;
        
        private bool canCreateCompilationField;
        
        private bool canEditField;
        
        private bool canDeleteField;
        
        private bool canHideField;
        
        private bool canRestoreField;
        
        private bool canGrantPermissionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string PackageFormat {
            get {
                return this.packageFormatField;
            }
            set {
                this.packageFormatField = value;
            }
        }
        
        /// <remarks/>
        public string PackageHash {
            get {
                return this.packageHashField;
            }
            set {
                this.packageHashField = value;
            }
        }
        
        /// <remarks/>
        public bool Hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
            }
        }
        
        /// <remarks/>
        public MetadataEntry[] Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
        
        /// <remarks/>
        public bool CanCreateCompilation {
            get {
                return this.canCreateCompilationField;
            }
            set {
                this.canCreateCompilationField = value;
            }
        }
        
        /// <remarks/>
        public bool CanEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool CanHide {
            get {
                return this.canHideField;
            }
            set {
                this.canHideField = value;
            }
        }
        
        /// <remarks/>
        public bool CanRestore {
            get {
                return this.canRestoreField;
            }
            set {
                this.canRestoreField = value;
            }
        }
        
        /// <remarks/>
        public bool CanGrantPermission {
            get {
                return this.canGrantPermissionField;
            }
            set {
                this.canGrantPermissionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Permissions {
        
        private VersionPermission[] versionsField;
        
        private ProjectPermission[] projectsField;
        
        private RepositoryPermission[] repositoriesField;
        
        private CompanyPermission[] companiesField;
        
        /// <remarks/>
        public VersionPermission[] Versions {
            get {
                return this.versionsField;
            }
            set {
                this.versionsField = value;
            }
        }
        
        /// <remarks/>
        public ProjectPermission[] Projects {
            get {
                return this.projectsField;
            }
            set {
                this.projectsField = value;
            }
        }
        
        /// <remarks/>
        public RepositoryPermission[] Repositories {
            get {
                return this.repositoriesField;
            }
            set {
                this.repositoriesField = value;
            }
        }
        
        /// <remarks/>
        public CompanyPermission[] Companies {
            get {
                return this.companiesField;
            }
            set {
                this.companiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class PackageImageFile {
        
        private string nameField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class PackageCompilation {
        
        private string modeField;
        
        private string platformField;
        
        private string binaryDistributionUrlField;
        
        private PackageImageFile[] imageFilesField;
        
        /// <remarks/>
        public string Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public string Platform {
            get {
                return this.platformField;
            }
            set {
                this.platformField = value;
            }
        }
        
        /// <remarks/>
        public string BinaryDistributionUrl {
            get {
                return this.binaryDistributionUrlField;
            }
            set {
                this.binaryDistributionUrlField = value;
            }
        }
        
        /// <remarks/>
        public PackageImageFile[] ImageFiles {
            get {
                return this.imageFilesField;
            }
            set {
                this.imageFilesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class PackageVersion {
        
        private string nameField;
        
        private string projectField;
        
        private string sourceDistributionUrlField;
        
        private PackageCompilation[] compilationsField;
        
        private MetadataEntry[] metadataField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string SourceDistributionUrl {
            get {
                return this.sourceDistributionUrlField;
            }
            set {
                this.sourceDistributionUrlField = value;
            }
        }
        
        /// <remarks/>
        public PackageCompilation[] Compilations {
            get {
                return this.compilationsField;
            }
            set {
                this.compilationsField = value;
            }
        }
        
        /// <remarks/>
        public MetadataEntry[] Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class PackageProject {
        
        private string nameField;
        
        private string repositoryField;
        
        private string homePageUrlField;
        
        private PackageVersion versionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string HomePageUrl {
            get {
                return this.homePageUrlField;
            }
            set {
                this.homePageUrlField = value;
            }
        }
        
        /// <remarks/>
        public PackageVersion Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class UploadReport {
        
        private string userField;
        
        private System.DateTime startedField;
        
        private System.Nullable<System.DateTime> endedField;
        
        private string summaryField;
        
        private string logField;
        
        private string exceptionField;
        
        private string repositoryField;
        
        private string projectField;
        
        private string versionField;
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Started {
            get {
                return this.startedField;
            }
            set {
                this.startedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> Ended {
            get {
                return this.endedField;
            }
            set {
                this.endedField = value;
            }
        }
        
        /// <remarks/>
        public string Summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        public string Log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
        
        /// <remarks/>
        public string Exception {
            get {
                return this.exceptionField;
            }
            set {
                this.exceptionField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Depedency))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Reference {
        
        private string cultureField;
        
        private string nameField;
        
        private string versionField;
        
        private string publicKeyTokenField;
        
        /// <remarks/>
        public string Culture {
            get {
                return this.cultureField;
            }
            set {
                this.cultureField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string PublicKeyToken {
            get {
                return this.publicKeyTokenField;
            }
            set {
                this.publicKeyTokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Depedency : Reference {
        
        private string typeField;
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class ImageFile {
        
        private string nameField;
        
        private string fileVersionField;
        
        private string binaryHashField;
        
        private string binaryTypeField;
        
        private string symbolHashField;
        
        private string symbolTypeField;
        
        private string documentationTypeField;
        
        private Reference referenceField;
        
        private string modeField;
        
        private string platformField;
        
        private string versionField;
        
        private string projectField;
        
        private string repositoryField;
        
        private string companyField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string FileVersion {
            get {
                return this.fileVersionField;
            }
            set {
                this.fileVersionField = value;
            }
        }
        
        /// <remarks/>
        public string BinaryHash {
            get {
                return this.binaryHashField;
            }
            set {
                this.binaryHashField = value;
            }
        }
        
        /// <remarks/>
        public string BinaryType {
            get {
                return this.binaryTypeField;
            }
            set {
                this.binaryTypeField = value;
            }
        }
        
        /// <remarks/>
        public string SymbolHash {
            get {
                return this.symbolHashField;
            }
            set {
                this.symbolHashField = value;
            }
        }
        
        /// <remarks/>
        public string SymbolType {
            get {
                return this.symbolTypeField;
            }
            set {
                this.symbolTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentationType {
            get {
                return this.documentationTypeField;
            }
            set {
                this.documentationTypeField = value;
            }
        }
        
        /// <remarks/>
        public Reference Reference {
            get {
                return this.referenceField;
            }
            set {
                this.referenceField = value;
            }
        }
        
        /// <remarks/>
        public string Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public string Platform {
            get {
                return this.platformField;
            }
            set {
                this.platformField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
        
        /// <remarks/>
        public string Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public partial class Caller {
        
        private string companyField;
        
        private string nameField;
        
        private string keyValueField;
        
        private string keyTypeField;
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string KeyValue {
            get {
                return this.keyValueField;
            }
            set {
                this.keyValueField = value;
            }
        }
        
        /// <remarks/>
        public string KeyType {
            get {
                return this.keyTypeField;
            }
            set {
                this.keyTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.symbolsource.org/schemas/webServices")]
    public enum StatisticPeriod {
        
        /// <remarks/>
        Day,
        
        /// <remarks/>
        Month,
        
        /// <remarks/>
        Year,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPlansByTypeCompletedEventHandler(object sender, GetPlansByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlansByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlansByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Plan[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Plan[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemovePlanCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreatePlanCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetImageFileLinkCompletedEventHandler(object sender, GetImageFileLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageFileLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageFileLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ImageFile imageFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSourceFileLinkCompletedEventHandler(object sender, GetSourceFileLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceFileLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceFileLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SourceFile sourceFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SourceFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSymbolFileLinkCompletedEventHandler(object sender, GetSymbolFileLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSymbolFileLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSymbolFileLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ImageFile imageFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentationLinkCompletedEventHandler(object sender, GetDocumentationLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentationLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentationLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ImageFile imageFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPackageLinkCompletedEventHandler(object sender, GetPackageLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Version version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUploadReportsCompletedEventHandler(object sender, GetUploadReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUploadReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUploadReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadReport[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadReport[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UploadPackageCompletedEventHandler(object sender, UploadPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserPermissionsCompletedEventHandler(object sender, GetUserPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Permissions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Permissions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCompanyPermissionsCompletedEventHandler(object sender, GetCompanyPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompanyPermission[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompanyPermission[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRepositoryPermissionsCompletedEventHandler(object sender, GetRepositoryPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRepositoryPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRepositoryPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RepositoryPermission[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RepositoryPermission[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProjectPermissionsCompletedEventHandler(object sender, GetProjectPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectPermission[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectPermission[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetVersionPermissionsCompletedEventHandler(object sender, GetVersionPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VersionPermission[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VersionPermission[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetCompanyPermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetRepositoryPermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetProjectPermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetVersionPermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCompaniesCompletedEventHandler(object sender, GetCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Company[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Company[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateCompanyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateCompany2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateCompanyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteCompanyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Company company {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Company)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateUserCompletedEventHandler(object sender, UpdateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRepositoriesCompletedEventHandler(object sender, GetRepositoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRepositoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRepositoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Repository[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Repository[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Company company {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Company)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateOrUpdateRepositoryCompletedEventHandler(object sender, CreateOrUpdateRepositoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateRepositoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateRepositoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Repository repository {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Repository)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateRepositoryCompletedEventHandler(object sender, CreateRepositoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRepositoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRepositoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Repository repository {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Repository)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateRepositoryCompletedEventHandler(object sender, UpdateRepositoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRepositoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRepositoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Repository repository {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Repository)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteRepositoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetImageFileCompletedEventHandler(object sender, GetImageFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImageFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogImageFileFoundCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogImageFileNotFoundCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogSourceFileFoundCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAvailableStatisticNamesCompletedEventHandler(object sender, GetAvailableStatisticNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableStatisticNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableStatisticNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetStatisticCompletedEventHandler(object sender, GetStatisticCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatisticCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatisticCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Statistic[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Statistic[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DigestGenerateRequestCompletedEventHandler(object sender, DigestGenerateRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DigestGenerateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DigestGenerateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DigestValidateResponseCompletedEventHandler(object sender, DigestValidateResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DigestValidateResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DigestValidateResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Caller Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Caller)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProjectsCompletedEventHandler(object sender, GetProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Project[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Project[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Repository repository {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Repository)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateOrUpdateProjectCompletedEventHandler(object sender, CreateOrUpdateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Project project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Project)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateProjectCompletedEventHandler(object sender, CreateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Project project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Project)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateProjectCompletedEventHandler(object sender, UpdateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Project project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Project)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteProjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetVersionsCompletedEventHandler(object sender, GetVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Project project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Project)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateOrUpdateVersionCompletedEventHandler(object sender, CreateOrUpdateVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateVersionCompletedEventHandler(object sender, CreateVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateVersionCompletedEventHandler(object sender, UpdateVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteVersionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetVersionHiddenCompletedEventHandler(object sender, SetVersionHiddenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetVersionHiddenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetVersionHiddenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Version version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetVersionLastListCompletedEventHandler(object sender, GetVersionLastListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionLastListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionLastListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPackagesCompletedEventHandler(object sender, GetPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Version[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Repository repository {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Repository)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public PackageFilter filter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageFilter)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCompilationListCompletedEventHandler(object sender, GetCompilationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompilationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompilationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Compilation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Compilation[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Version version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Version)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetImageFileListCompletedEventHandler(object sender, GetImageFileListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImageFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Compilation compilation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Compilation)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSourceFileListCompletedEventHandler(object sender, GetSourceFileListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SourceFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SourceFile[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ImageFile imageFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDepedencyListCompletedEventHandler(object sender, GetDepedencyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDepedencyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDepedencyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Depedency[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Depedency[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ImageFile imageFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetImageFileListByReferenceCompletedEventHandler(object sender, GetImageFileListByReferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageFileListByReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageFileListByReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImageFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFile[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Reference reference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Reference)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetNodeImageFilesCompletedEventHandler(object sender, GetNodeImageFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodeImageFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodeImageFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NodeImageFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NodeImageFile[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public NodeImageFile nodeImageFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NodeImageFile)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserValidateCompletedEventHandler(object sender, UserValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateUserByKeyCompletedEventHandler(object sender, CreateUserByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Caller Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Caller)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserByKeyCompletedEventHandler(object sender, GetUserByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Caller Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Caller)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendPasswordMailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserKeysCompletedEventHandler(object sender, GetUserKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserKey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserKey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddUserKeyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveUserKeyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserVisualStudioLinkCompletedEventHandler(object sender, GetUserVisualStudioLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserVisualStudioLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserVisualStudioLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591